version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-worldinfo_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-change_this_rabbitmq_password}
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - observability

  # SkyWalking OAP (Observability Analysis Platform)
  skywalking-oap:
    image: apache/skywalking-oap-server:10.1.0
    container_name: skywalking-oap
    environment:
      SW_STORAGE: h2
      SW_OTEL_RECEIVER: default
      SW_OTEL_RECEIVER_ENABLED_OTEL_RULES: vm,mysql,postgresql,oap
      SW_TELEMETRY: prometheus
      JAVA_OPTS: "-Xms2048m -Xmx2048m"
    ports:
      - "11800:11800"    # gRPC endpoint
      - "12800:12800"    # HTTP endpoint
      - "1234:1234"      # Prometheus metrics endpoint
    volumes:
      - skywalking_data:/skywalking/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:12800/internal/l7check || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - observability

  # SkyWalking UI
  skywalking-ui:
    image: apache/skywalking-ui:10.1.0
    container_name: skywalking-ui
    environment:
      SW_OAP_ADDRESS: http://skywalking-oap:12800
      SW_ZIPKIN_ADDRESS: http://skywalking-oap:9412
    ports:
      - "8080:8080"
    depends_on:
      skywalking-oap:
        condition: service_healthy
    networks:
      - observability

  # Grafana Alloy (OpenTelemetry Collector + Loki Log Collector)
  grafana-alloy:
    image: grafana/alloy:v1.4.2
    container_name: grafana-alloy
    command: 
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    ports:
      - "12345:12345"    # Alloy UI
      - "4317:4317"      # OTLP gRPC receiver
      - "4318:4318"      # OTLP HTTP receiver
      - "14268:14268"    # Jaeger thrift receiver
      - "3100:3100"      # Loki receiver for logs
    volumes:
      - ./configs/alloy:/etc/alloy:ro
      - alloy_data:/var/lib/alloy/data
    depends_on:
      skywalking-oap:
        condition: service_healthy
    networks:
      - observability

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-change_this_grafana_password}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_FEATURE_TOGGLES_ENABLE: traceToMetrics
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - observability

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:3.2.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3101:3100"
    volumes:
      - loki_data:/loki
      - ./configs/loki:/etc/loki:ro
    networks:
      - observability

  # Prometheus for Metrics (optional - can use SkyWalking metrics)
  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus:/etc/prometheus:ro
    networks:
      - observability

  # Java Producer Service with OpenTelemetry
  java-producer:
    build:
      context: ./src/java-producer
      dockerfile: Dockerfile
    container_name: java-producer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER:-worldinfo_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS:-change_this_rabbitmq_password}
      OTEL_SERVICE_NAME: java-producer
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_RESOURCE_ATTRIBUTES: service.name=java-producer,service.version=1.0.0,deployment.environment=docker
      OTEL_EXPORTER_OTLP_ENDPOINT: http://grafana-alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_PROPAGATORS: tracecontext,baggage
      OTEL_JAVAAGENT_ENABLED: true
      JAVA_TOOL_OPTIONS: -javaagent:/app/opentelemetry-javaagent.jar
    ports:
      - "8081:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      skywalking-oap:
        condition: service_healthy
      grafana-alloy:
        condition: service_started
    volumes:
      - ./logs/java-producer:/app/logs
    networks:
      - observability

volumes:
  rabbitmq_data:
  skywalking_data:
  alloy_data:
  grafana_data:
  loki_data:
  prometheus_data:

networks:
  observability:
    driver: bridge
